<%@ Page Language="C#" AutoEventWireup="true" CodeBehind="MeetingsList.aspx.cs" Inherits="WebApplication1_MAL.MeetingsList" %>

<!DOCTYPE html>
<html>
<head runat="server">
    <title>My Upcoming Meetings</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
</head>
<body>
    <form id="form1" runat="server" class="container mt-4">
        <h2 class="mb-4">My Upcoming Meetings</h2>

        <a href="CreateMeeting.aspx" class ="btn btn-primary">Add New Meeting</a>

<%--        <asp:GridView ID="gvMeetings" runat="server" CssClass="table table-bordered table-striped" AutoGenerateColumns="False">
            <Columns>
                <asp:BoundField DataField="MeetingId" HeaderText="Meeting ID" />
                <asp:BoundField DataField="Title" HeaderText="Title" />
                <asp:BoundField DataField="StartDate" HeaderText="Start Date" DataFormatString="{0:yyyy-MM-dd HH:mm}" />
                <asp:BoundField DataField="EndDate" HeaderText="End Date" DataFormatString="{0:yyyy-MM-dd HH:mm}" />
                <asp:BoundField DataField="Venue" HeaderText="Venue" />
                <asp:BoundField DataField="Organizer" HeaderText="Organizer" />
            </Columns>
        </asp:GridView>--%>


        <asp:GridView ID="gvMeetings" runat="server" CssClass="table table-bordered table-striped"
    AutoGenerateColumns="False" OnRowCommand="gvMeetings_RowCommand" DataKeyNames="MeetingId">
    <Columns>
        <asp:BoundField DataField="MeetingId" HeaderText="Meeting ID" />
        <asp:BoundField DataField="Title" HeaderText="Title" />
        <asp:BoundField DataField="StartDate" HeaderText="Start Date" DataFormatString="{0:yyyy-MM-dd HH:mm}" />
        <asp:BoundField DataField="EndDate" HeaderText="End Date" DataFormatString="{0:yyyy-MM-dd HH:mm}" />
        <asp:BoundField DataField="Venue" HeaderText="Venue" />
        <asp:BoundField DataField="Status" HeaderText="Status" />

        <asp:TemplateField HeaderText="Actions">
            <ItemTemplate>
                <asp:Button runat="server" Text="Start" CommandName="Start" CommandArgument='<%# Eval("MeetingId") %>' CssClass="btn btn-success btn-sm me-1" />
                <asp:Button runat="server" Text="Edit" CommandName="EditMeeting" CommandArgument='<%# Eval("MeetingId") %>' CssClass="btn btn-warning btn-sm me-1" />
                <asp:Button runat="server" Text="Delete" CommandName="DeleteMeeting" CommandArgument='<%# Eval("MeetingId") %>' CssClass="btn btn-danger btn-sm" OnClientClick="return confirm('Are you sure you want to delete this meeting?');" />
            </ItemTemplate>
        </asp:TemplateField>
    </Columns>
</asp:GridView>

        <asp:Label ID="lblMessage" runat="server" CssClass="text-danger fw-bold"></asp:Label>
    </form>
</body>
</html>

---

using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;

namespace WebApplication1_MAL
{
    public partial class MeetingsList : System.Web.UI.Page
    {
        protected void Page_Load(object sender, EventArgs e)
        {
            if (!IsPostBack)
            {
                LoadMeetings();
            }
        }

        private void LoadMeetings()
        {
            string connStr = ConfigurationManager.ConnectionStrings["MeetingDb"].ConnectionString;
            string currentUser = Session["Username"].ToString(); //"B014172"; //Session["B014172"].ToString(); //User.Identity.Name; // or Session["Username"].ToString();

            using (SqlConnection conn = new SqlConnection(connStr))
            using (SqlCommand cmd = new SqlCommand("GetUserMeetings", conn))
            {
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@CreatedBy", currentUser);

                using (SqlDataAdapter da = new SqlDataAdapter(cmd))
                {
                    DataTable dt = new DataTable();
                    da.Fill(dt);

                    if (dt.Rows.Count > 0)
                    {
                        gvMeetings.DataSource = dt;
                        gvMeetings.DataBind();
                    }
                    else
                    {
                        lblMessage.Text = "No upcoming meetings found.";
                        gvMeetings.DataSource = null;
                        gvMeetings.DataBind();
                    }
                }
            }
        }
        protected void gvMeetings_RowCommand(object sender, GridViewCommandEventArgs e)
        {
            string meetingId = e.CommandArgument.ToString();

            //if (e.CommandName == "Start")
            //{
            //    // Redirect to Tapping Page (e.g., Attendance logging)
            //    Response.Redirect($"meetingattendance.aspx?meetingId={meetingId}");
            //}

            if (e.CommandName == "Start")
            {
                string connectionString = ConfigurationManager.ConnectionStrings["MeetingDb"].ConnectionString;
                //string connStr = ConfigurationManager.ConnectionStrings["MeetingDb"].ConnectionString;

                using (SqlConnection conn = new SqlConnection(connectionString))
                {
                    using (SqlCommand cmd = new SqlCommand("UpdateMeetingStatus", conn))
                    {
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.AddWithValue("@MeetingID", meetingId);

                        conn.Open();
                        cmd.ExecuteNonQuery();
                    }
                }

                // Redirect to Tapping Page (e.g., Attendance logging)
                Response.Redirect($"meetingattendance.aspx?meetingId={meetingId}");
            }

            else if (e.CommandName == "EditMeeting")
            {
                // Redirect to Edit page (you must create this)
                Response.Redirect($"EditMeeting.aspx?meetingId={meetingId}");
            }
            else if (e.CommandName == "DeleteMeeting")
            {
                DeleteMeeting(meetingId);
                LoadMeetings(); // refresh grid
                
            }
        }


        private void DeleteMeeting(string meetingId)
        {
            string connStr = ConfigurationManager.ConnectionStrings["MeetingDb"].ConnectionString;

            using (SqlConnection conn = new SqlConnection(connStr))
            using (SqlCommand cmd = new SqlCommand("DeleteMeeting", conn))
            {
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@MeetingId", meetingId);

                conn.Open();
                cmd.ExecuteNonQuery();
            }
        }
    }
}
